package hms

import (
	"bytes"
	"cloud.google.com/go/firestore"
	"context"
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

const (
	loginHMS    = "https://oauth-login.cloud.huawei.com/oauth2/v3/token"
	pushRequest = "https://push-api.cloud.huawei.com/v1/104640557/messages:send"
)

type FirebaseRepository struct {
	db *firestore.Client
}

func (f *FirebaseRepository) GetTokensByUser(ctx context.Context, user string) ([]string, error) {
	type UserTokens struct {
		HmsTokens []string `firestore:"hms_tokens,omitempty"`
	}

	doc, err := f.db.Collection("user-token-devices").Doc(user).Get(ctx)
	if err != nil {
		log.Println(err)
		return nil, err
	}

	ut := UserTokens{}
	err = doc.DataTo(&ut)
	if err != nil {
		log.Println(err)
		return nil, err
	}

	return ut.HmsTokens, nil
}

// NewRepository returns a new postgres repository.
func newRepository(db *firestore.Client) Repository {
	return &FirebaseRepository{
		db: db,
	}
}

type Repository interface {
	GetTokensByUser(ctx context.Context, user string) ([]string, error)
	postNotificationPush(data []byte) error
}

func (f *FirebaseRepository) postNotificationPush(data []byte) error {

	token, err := getTokenPush()
	if err != nil {
		log.Println(err)
		return err
	}

	client := &http.Client{}
	r, err := http.NewRequest("POST", pushRequest, bytes.NewBuffer(data)) // URL-encoded payload
	if err != nil {
		log.Println(err)
		return err
	}
	r.Header.Add("Content-Type", "application/json")
	r.Header.Add("Authorization", token)

	res, err := client.Do(r)
	if err != nil {
		log.Println(err)
		return err
	}
	log.Println(res.Status)
	defer res.Body.Close()
	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		log.Println(err)
		return err
	}
	log.Println(string(body))

	return nil
}

func getTokenPush() (string, error) {
	endpoint := loginHMS
	data := url.Values{}
	data.Set("grant_type", "client_credentials")
	data.Set("client_id", "104640557")
	data.Set("client_secret", "cab4cc4b36a3dced565053875ff24c4d83a6598708d4744adbf29ac8bea067a0")

	client := &http.Client{}
	r, err := http.NewRequest("POST", endpoint, strings.NewReader(data.Encode())) // URL-encoded payload
	if err != nil {
		log.Fatal(err)
	}
	r.Header.Add("Content-Type", "application/x-www-form-urlencoded")
	r.Header.Add("Content-Length", strconv.Itoa(len(data.Encode())))

	res, err := client.Do(r)
	if err != nil {
		log.Fatal(err)
	}
	log.Println(res.Status)
	defer res.Body.Close()
	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		log.Fatal(err)
	}
	log.Println(string(body))

	var AutoGenerated struct {
		AccessToken string `json:"access_token"`
		ExpiresIn   int    `json:"expires_in"`
		TokenType   string `json:"token_type"`
	}

	err = json.Unmarshal(body, &AutoGenerated)
	if err != nil {
		log.Fatal(err)
	}

	return AutoGenerated.TokenType + " " + AutoGenerated.AccessToken, nil
}

//{
//"code": "80200003",
//"msg": "Access token expired",
//"requestId": "163045792801636388000507"
//}
