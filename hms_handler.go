package push_notification

import (
	"context"
	"encoding/json"
	"errors"
	"log"
)

func HmsSendPushNotificaction(ctx context.Context, data *DataNotification) error {
	if len(data.UsersID) == 0 {
		err := errors.New("No procede la solicitud sin un UserID")
		log.Println(err)
		return err
	}

	//toker organized by users
	Utokens, err := sh.GetTokensByUsers(ctx, data.UsersID)
	if err != nil {
		log.Println(err)
		return err
	}

	jsonStr, err := json.Marshal(data.Message.Data)
	if err != nil {
		log.Println(err)
		return err
	}

	dataHMS := AutoGenerated{
		ValidateOnly: false,
		Message: Message{
			Data: string(jsonStr),
			Notification: Notification{
				Title: "",
				Body:  "",
			},
			Android: Android{
				NotificationA: NotificationA{
					Title: data.Message.Data["title"],
					Body:  data.Message.Data["body"],
					ClickAction: ClickAction{
						Type:   1,
						Intent: "intent://com.huawei.codelabpush/deeplink?#Intent;scheme=pushscheme;launchFlags=0x04000000;i.age=180;S.name=abc;end",
					},
				},
			},
			Token: Utokens,
		},
	}

	json, err := json.Marshal(dataHMS)
	if err != nil {
		log.Println(err)
		return err
	}

	err = sh.PostNotificationPush(json)
	if err != nil {
		log.Println(err)
		return err
	}

	return nil
}

type AutoGenerated struct {
	ValidateOnly bool    `json:"validate_only"`
	Message      Message `json:"message"`
}

type Message struct {
	Data         string       `json:"data"`
	Notification Notification `json:"notification"`
	Android      Android      `json:"android"`
	Token        []string     `json:"token"`
}

type Notification struct {
	Title string `json:"title"`
	Body  string `json:"body"`
}

type Android struct {
	NotificationA NotificationA `json:"notification"`
}

type NotificationA struct {
	Title       string      `json:"title"`
	Body        string      `json:"body"`
	ClickAction ClickAction `json:"click_action"`
}

type ClickAction struct {
	Type   int    `json:"type"`
	Intent string `json:"intent"`
}
